1. Method Overriding

// You are using Java
class Animal { 
  
    void name() {
        
    }
} 
class Main { 
    public static void main(String[] args) 
    { 
  
      Animal animal = new Dog();
      animal.name();
      
      animal = new Cat();
      animal.name();
    } 
}
class Dog extends Animal { 
  
     void name() {
        System.out.println("Dog");
    }
} 
  
class Cat extends Animal { 
   void name() {
        System.out.println("Cat");
    }
}

=============================================

2. Matrix Rotation Using Inheritance

import java.util.Scanner;

class Clock {
    protected int[][] matrix;
    protected int rows, cols;

    public Clock(int[][] matrix, int rows, int cols) {
        this.matrix = matrix;
        this.rows = rows;
        this.cols = cols;
    }

    protected void printMatrix(String direction) {
        System.out.println(direction);
        for (int[] row : matrix) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }
}

class Clockwise extends Clock {
    public Clockwise(int[][] matrix, int rows, int cols) {
        super(matrix, rows, cols);
    }

    public void rotate(int times) {
        while (times-- > 0) {
            int layers = Math.min(rows, cols) / 2;

            for (int layer = 0; layer < layers; layer++) {
                int top = layer;
                int bottom = rows - 1 - layer;
                int left = layer;
                int right = cols - 1 - layer;

                int prev = matrix[bottom][left];

                // Move bottom row left
                for (int i = left; i < right; i++) {
                    matrix[bottom][i] = matrix[bottom][i + 1];
                }

                // Move right column up
                for (int i = bottom; i > top; i--) {
                    matrix[i][right] = matrix[i - 1][right];
                }

                // Move top row right
                for (int i = right; i > left; i--) {
                    matrix[top][i] = matrix[top][i - 1];
                }

                // Move left column down
                for (int i = top; i < bottom; i++) {
                    matrix[i][left] = matrix[i + 1][left];
                }

                matrix[bottom - 1][left] = prev;
            }
        }

        printMatrix("Clockwise");
    }
}

class Anticlockwise extends Clock {
    public Anticlockwise(int[][] matrix, int rows, int cols) {
        super(matrix, rows, cols);
    }

    public void rotate(int times) {
        while (times-- > 0) {
            int layers = Math.min(rows, cols) / 2;

            for (int layer = 0; layer < layers; layer++) {
                int top = layer;
                int bottom = rows - 1 - layer;
                int left = layer;
                int right = cols - 1 - layer;

                int prev = matrix[top][left];

                // Move top row left
                for (int i = left; i < right; i++) {
                    matrix[top][i] = matrix[top][i + 1];
                }

                // Move right column up
                for (int i = top; i < bottom; i++) {
                    matrix[i][right] = matrix[i + 1][right];
                }

                // Move bottom row right
                for (int i = right; i > left; i--) {
                    matrix[bottom][i] = matrix[bottom][i - 1];
                }

                // Move left column down
                for (int i = bottom; i > top + 1; i--) {
                    matrix[i][left] = matrix[i - 1][left];
                }

                matrix[top + 1][left] = prev;
            }
        }

        printMatrix("Anti clockwise");
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int rows = sc.nextInt();
        int cols = sc.nextInt();

        int[][] mat1 = new int[rows][cols];
        int[][] mat2 = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int val = sc.nextInt();
                mat1[i][j] = val;
                mat2[i][j] = val;
            }
        }

        int rotations = sc.nextInt();

        Clockwise cw = new Clockwise(mat1, rows, cols);
        cw.rotate(rotations);

        Anticlockwise acw = new Anticlockwise(mat2, rows, cols);
        acw.rotate(rotations);
    }
}
