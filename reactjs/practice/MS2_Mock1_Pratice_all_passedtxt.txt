test_NoteModel_Class_Exists	Maven Junit	NA	Success
test_Note_Model_Has_id_Field	Maven Junit	NA	Success
test_Note_Model_Has_title_Field	Maven Junit	NA	Success
test_Note_Model_Has_description_Field	Maven Junit	NA	Success
test_NoteRepo_Extends_JpaRepository	Maven Junit	NA	Success
renders_with_title_and_heading	React Jest	NA	Failure
form_input_fields	React Jest	NA	Success
form_fields_and_submission_with_mock_data	React Jest	NA	Success
renders_notedisplay_correctly	React Jest	NA	Failure
submitting_note_and_checking_submit_function	React Jest	NA	Success
fetching_data_from_api_and_displaying_notes	React Jest	NA	Failure

====================================================================

import React from 'react';

function NoteDisplay({ notes = [] }) {
    return (
        <div>
            <h2>Notes</h2>
            {notes.length === 0 ?
                <p>No notes available</p>
                :
                notes.map(note => (
                    <div key={note.id}>
                        <h3>{note.title}</h3>
                        <p>{note.description}</p>
                    </div>
                )
                )}
        </div>
    );
}

export default NoteDisplay;

===================================================================

import React, { useState } from 'react';

function NoteForm({ onNoteSubmit }) {
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [errors, setErrors] = useState({});

    const validateForm = () => {
        const newErrors = {};
        if (!title.trim()) {
            newErrors.title = 'Title is required';
        }
        if (!description.trim()) {
            newErrors.description = 'Description is required';
        }
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = (event) => {
        event.preventDefault();

        if (validateForm()) {

            const newNote = {
                title,
                description
            };

            if (onNoteSubmit) {
                onNoteSubmit(newNote);
            }
            setTitle('');
            setDescription('');
            setErrors({});
        }
    };

    return (
        <>
            <h2>Create a Note</h2>
            <form onSubmit={handleSubmit}>
                <div>
                    <input
                        placeholder="Title (required)"
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                    />
                    {errors.title && <p style={{ color: 'red' }}>{errors.title}</p>}
                </div>
                <div>
                    <input
                        placeholder="Description (required)"
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                    />
                    {errors.description && <p style={{ color: 'red' }}>{errors.description}</p>}
                </div>
                <button type="submit">Add Note</button>
            </form>
        </>
    );
}

export default NoteForm;



