
@Entity
public class Student {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    private String email;

    // Getters and setters
}

==================================================================

public StudentRepository extends JpaRepository<Student,Long> {

}

==================================================================


public interface StudentService {

    Student saveStudent(Student student);

    List<Student> fetchAllStudent();

    Student findStudentById(Long id);

    Student updateStudent(Long id, Student updatedStudent);

    void deleteStudent(Long id);
}



@Service
public class StudentServiceImpl implements StudentService {

    @Autowired
    private StudentRepository studentRepository;

    @Override
    public Student saveStudent(Student student) {

	if (student.getName() == null || student.getName().trim().isEmpty()) {
            throw new BadRequestException("Student name must not be empty");
        }
        if (student.getEmail() == null || student.getEmail().trim().isEmpty()) {
            throw new BadRequestException("Student email must not be empty");
        }
      
        if (!student.getEmail().contains("@")) {
            throw new BadRequestException("Student email is invalid");
        }
       
        try {
            return studentRepository.save(student);
        } catch (Exception e) {
            throw new StudentSaveException("Failed to save student: " + e.getMessage());
        }
    }

    @Override
    public List<Student> fetchAllStudent() {
        return studentRepository.findAll();
    }


    @Override
    public Student findStudentById(Long id) {
        return studentRepository.findById(id)
                .orElseThrow(() -> new StudentNotFoundException(id));
    }


    @Override
    public Student updateStudent(Long id, Student updatedStudent) {

        Student existingStudent = studentRepository.findById(id)
                .orElseThrow(() -> new StudentNotFoundException(id));

        if (student.getName() == null || student.getName().trim().isEmpty()) {
            throw new BadRequestException("Student name must not be empty");
        }
        if (student.getEmail() == null || student.getEmail().trim().isEmpty()) {
            throw new BadRequestException("Student email must not be empty");
        }     
        if (!student.getEmail().contains("@")) {
            throw new BadRequestException("Student email is invalid");
        }


        existingStudent.setName(updatedStudent.getName());
        existingStudent.setEmail(updatedStudent.getEmail());

        try {
            return studentRepository.save(existingStudent);
        } catch (Exception e) {
            throw new StudentSaveException("Failed to update student: " + e.getMessage());
        }
    }

    @Override
    public void deleteStudent(Long id) {

        Student student = studentRepository.findById(id)
                .orElseThrow(() -> new StudentNotFoundException(id));

        studentRepository.delete(student);
    }

}

=====================================================================

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(StudentNotFoundException.class)
    public ResponseEntity<String> handleStudentNotFound(StudentNotFoundException ex) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
    }

    @ExceptionHandler(BadRequestException.class)
    public ResponseEntity<String> handleBadRequest(BadRequestException ex) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
    }

    @ExceptionHandler(StudentSaveException.class)
    public ResponseEntity<String> handleSaveException(StudentSaveException ex) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ex.getMessage());
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleAllExceptions(Exception ex) {
        ex.printStackTrace();
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                             .body("An unexpected error occurred: " + ex.getMessage());
    }
}

=============================================================================================

@RestController
public class StudentController {

    @Autowired
    private StudentService studentService;

    @PostMapping("/student")
    public ResponseEntity<Student> addStudent(@RequestBody Student student) {

        Student savedStudent = studentService.saveStudent(student);
        return ResponseEntity.status(201).body(savedStudent);
    }

    @GetMapping("/student")
    public ResponseEntity<List<Student>> getAllStudents() {

        List<Student> students = studentService.fetchAllStudent();
        return ResponseEntity.status(200).body(students);
    }

    @GetMapping("/student/{id}")
    public ResponseEntity<Student> getStudentById(@PathVariable Long id) {

        Student student = studentService.findStudentById(id);
        return ResponseEntity.status(200).body(student);
    }

    @PutMapping("/student/{id}")
    public ResponseEntity<Student> updateStudent(@PathVariable Long id, @RequestBody Student student) {

        Student updatedStudent = studentService.updateStudent(id, student);
      	return ResponseEntity.status(200).body(updatedStudent);
    }

    @DeleteMapping("/student/{id}")
    public ResponseEntity<String> deleteStudent(@PathVariable Long id) {

        studentService.deleteStudent(id);
        return ResponseEntity.status(200).body("Student deleted successfully");
    }
}
