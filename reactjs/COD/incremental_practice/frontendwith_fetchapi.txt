import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
// import { useNavigate } from 'react-router-dom';

function SurveyList() {

    const [surveys, setSurveys] = useState([]);
    const [deleteStatus, setDeleteStatus] = useState(false);
    const [failuerMsg, setFailureMsg] = useState('');

    // const navigate = useNavigate();

    useEffect(() => {
        fetch("https://8080-aadacedeea335454953bfbbaefaone.premiumproject.examly.io/api/surveys")
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch surveys.');
                }
                return response.json();
            })
            .then(data => {
                setSurveys(data);
                setFailureMsg('');
            })
            .catch(err => {              
                setFailureMsg("Failed to load surveys.");
            });
    }, [deleteStatus]); // re-fetch surveys after deletion

    const handleDelete = (id) => {
        fetch(`https://8080-aadacedeea335454953bfbbaefaone.premiumproject.examly.io/api/surveys/${id}`, {
            method: 'DELETE',
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to delete survey.');
            }
            setDeleteStatus(true);
        })
        .catch(error => {
            setFailureMsg('Failed to delete survey.');
            console.error('Delete error:', error);
        });
    };

    return (
        <>
            {
                surveys.length > 0 ?
                    surveys.map(survey =>
                        <div>
                            <h3>Title: {survey.title}</h3>
                            <b>Description: </b> <span>{survey.description}</span> &nbsp;
                            <Link to={`/survey/edit/${survey.id}`}><button>Edit</button></Link>&nbsp;&nbsp;
                            <button onClick={() => handleDelete(survey.id)}>Delete</button>&nbsp;&nbsp;
                            <Link to={`/survey/details/${survey.id}`}><button>View</button></Link>&nbsp;&nbsp;
                            <hr></hr>
                        </div>

                    ) : <h3>No surveys available</h3>
            }
            <p>
                {failuerMsg && <span style={{ color: 'red' }}>{failuerMsg}</span>}
            </p>
            <p>
                {deleteStatus && <span style={{ color: 'green' }}>Successfully deleted.</span>}
            </p>

        </>
    )
}

export default SurveyList;

======================================================

import React, { useState } from 'react';
import SurveyUpdate from './SurveyUpdate';

function SurveyForm({ mode }) {

    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [formErrors, setFormErrors] = useState({});
    const [addSurveyStatus, setAddSurveyStatus] = useState('');

    const validateSurveyForm = () => {
        const errors = {};
        if (!title) {
            errors.title = "Title is required";
        }
        if (!description) {
            errors.description = "Description is required";
        }
        setFormErrors(errors);
        return Object.keys(errors).length === 0;
    }

    const handleSubmit = (event) => {
        event.preventDefault();

        if (validateSurveyForm()) {
            const payload = {
                title: title,
                description: description
            };

            fetch("https://8080-aadacedeea335454953bfbbaefaone.premiumproject.examly.io/api/surveys", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(payload)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to create survey");
                    }
                    return response.json(); // optional if you donâ€™t need to use response data
                })
                .then(() => {
                    setAddSurveyStatus("Survey added successfully!");
                    setTitle('');
                    setDescription('');
                    setFormErrors({});

                    setTimeout(() => {
                        setAddSurveyStatus('');
                    }, 2000);
                })
                .catch(error => {
                    console.error('Survey creation failed:', error);
                    setAddSurveyStatus("Error creating survey");
                });
        }
    };

    if (mode === "edit") {
        return <SurveyUpdate />
    }

    return (
        <>
            <form onSubmit={handleSubmit}>
                <div>
                    <label>Title</label>
                    <input type="text" name="title" value={title}
                        onChange={event => setTitle(event.target.value)} />
                    {formErrors.title && <span>{formErrors.title}</span>}
                </div>
                <div>
                    <label>Description</label>
                    <textarea rows={2} cols={12} name="description" value={description}
                        onChange={event => setDescription(event.target.value)} />
                    {formErrors.description && <span>{formErrors.description}</span>}
                </div>
                <button type="submit">Add Survey</button>

            </form>
            <p>{addSurveyStatus && <span>{addSurveyStatus}</span>}</p>
        </>
    )
}

export default SurveyForm;

===================================================================

import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';

function SurveyDetails() {

    const [survey, setSurvey] = useState(null);
    const [error, setError] = useState('');
    const { sid } = useParams();

    useEffect(() => {
        fetch(`https://8080-aadacedeea335454953bfbbaefaone.premiumproject.examly.io/api/surveys/${sid}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch survey');
                }
                return response.json();
            })
            .then(data => {
                setSurvey(data);
            })
            .catch(err => {
                console.error(err);
                setError('Unable to load survey details.');
            });
    }, [sid]);

    return (
        <>
            {error && <p style={{ color: 'red' }}>{error}</p>}

            {
                survey !== null &&
                <div>
                    <h2>Id: {survey.id}</h2>
                    <h3>Title: {survey.title}</h3>
                    <h4>Description: </h4> <span>{survey.description}</span>
                </div>
            }

        </>
    )
}

export default SurveyDetails;

=======================================================

import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';

function SurveyUpdate() {

    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [formErrors, setFormErrors] = useState({});
    const[updateSurveyStatus, setUpdateSurveyStatus] = useState(false);

    const { sid } = useParams();

    useEffect(() => {
        fetch(`https://8080-aadacedeea335454953bfbbaefaone.premiumproject.examly.io/api/surveys/${sid}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch survey');
                }
                return response.json();
            })
            .then(data => {
                setTitle(data.title);
                setDescription(data.description);
            })
            .catch(error => {
                console.error('Error fetching survey:', error);
                // Optionally handle error state here
            });
    }, [sid]);

    const validateSurveyForm = () => {
        const errors = {};
        if (!title) {
            errors.title = "Title is required";
        }
        if (!description) {
            errors.description = "Description is required";
        }
        setFormErrors(errors);
        return Object.keys(errors).length === 0;
    }

    const handleSubmit = (event) => {
        event.preventDefault();
    
        if (validateSurveyForm()) {
            const payload = {
                title: title,
                description: description
            };
    
            fetch(`https://8080-aadacedeea335454953bfbbaefaone.premiumproject.examly.io/api/surveys/${sid}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Failed to update survey");
                }
                return response.json(); // Optional if you need updated data
            })
            .then(() => {
                setUpdateSurveyStatus(false); // or true if you want to show "updated"
                setTitle('');
                setDescription('');
                setFormErrors({});
            })
            .catch(error => {
                console.error("Error updating survey:", error);
                // Optionally set error state here
            });
        }
    };
    
    return (
        <>
            <form onSubmit={handleSubmit}>
                <div>
                    <label>Title</label>
                    <input type="text" name="title" value={title}
                        onChange={event => setTitle(event.target.value)} />
                    {formErrors.title && <span>{formErrors.title}</span>}
                </div>
                <div>
                    <label>Description</label>
                    <textarea rows={2} cols={12} name="description" value={description}
                        onChange={event => setDescription(event.target.value)} />
                    {formErrors.description && <span>{formErrors.description}</span>}
                </div>
                <button type="submit">Update Survey</button>
            </form>
            <p>{updateSurveyStatus && <span>Survey updated successfully!</span>}</p>

        </>
    )
}

export default SurveyUpdate;

==================================================