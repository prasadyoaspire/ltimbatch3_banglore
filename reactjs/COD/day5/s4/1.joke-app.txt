===================================================================
import React from 'react';

const Header = () => {
  return (
    <header>
      <h1>Neo Joke</h1>
    </header>
  );
};

export default Header;

===================================================================
import React from 'react';

const Footer = () => {
  const year = new Date().getFullYear();
  return (
    <footer>
      <p>© {year} Neo Funtime</p>
    </footer>
  );
};

export default Footer;

==================================================================
import React from 'react';

const Joke = ({ joke, onNextJoke, onAddToFavorites }) => {
  return (
    <div>
      {joke.setup && <p>{joke.setup}</p>}
      {joke.punchline && <p>{joke.punchline}</p>}
      <button onClick={onNextJoke}>Next Joke</button>
      <button onClick={onAddToFavorites}>Add to My Fav</button>
    </div>
  );
};

export default Joke;


==================================================================
import React, { useState, useEffect } from 'react';
import Header from './components/Header';
import Footer from './components/Footer';
import Joke from './components/Joke';


function App() {
  const [joke, setJoke] = useState({});
  const [favorites, setFavorites] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchJoke = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await fetch('https://official-joke-api.appspot.com/random_joke');

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      setJoke(data);
    } catch (err) {
      setError('Failed to fetch a joke. Try again!');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchJoke();
  }, []);

  const addToFavorites = () => {
    if (joke.setup && joke.punchline) {
      setFavorites((prev) => [...prev, joke]);
    }
  };

  return (
    <div>
      <Header />

      <section>
        <h2>Joke of the Day</h2>
        {loading && <p>Loading...</p>}
        {error && <p style={{ color: 'red' }}>{error}</p>}
        {!loading && !error && (
          <Joke
            joke={joke}
            onNextJoke={fetchJoke}
            onAddToFavorites={addToFavorites}
          />
        )}
      </section>

      <section>
        <h2>My Favorites</h2>
        {favorites.length === 0 ? (
          <p>No favorite jokes yet.</p>
        ) : (
          <ul>
            {favorites.map((fav, index) => (
              <li key={index}>
                {fav.setup} – {fav.punchline}
              </li>
            ))}
          </ul>
        )}
      </section>

      <Footer />
    </div>
  );
}

export default App;
